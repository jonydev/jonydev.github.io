---
layout: post
title:  Web开发中模块化编程的思考
date:   2017-3-7
categories: note
tags: web
excerpt: 本文以一个实际项目中的开发过程为例，思考在web开发过程中如何实现模块化编程。
---

本人从毕业后就一直从事mobile开发工作，一路走来，对于编程的理解主要分如下几个过程：

>
1. 在一个Activity中写所有界面代码和业务逻辑，Thread搞定所有异步任务
2. 通过函数和类的拆分，把代码隔开，通过原生的Loader，AsyncTask完成异步任务
3. 学会用MVP模式架构代码，用各种开源库解决网络，异步等问题
4. 思考如何根据业务做类的划分，如何对代码分层，如何设计整个应用的架构

由于在第4年主要从事Android Framework的开发工作，因此详细了解并思考了Android系统的框架设计，受益匪浅，也对第四步有了一些自己的认识。这一路走来，我深知编码能力完全就是一条修炼之路，只有通过不断的学习与思考，才能有进步，否则只会止步不前。

我经常会想，什么样的代码才是最好的代码，有一句话我是认同的：没有代码就是最好的代码。我对这句话的理解是，站在工程代码的角度看，对于同一个需求，代码越少，复杂度越低，代码更容易维护，出错的概率越低，因此质量越高，这样的代码就越好。当然，我这里所说的代码越少是相对的，并非代码量越少，理由稍后阐述。由上面这个结论，我得出了如下两个结论：


## 代码需要模块化

对于一个既定的系统，业务的复杂度对应了代码的复杂度，这是无法改变的。但是，如果我们将业务拆分成一个个小的模块，模块内实现自控制，那么站在系统的角度而言，只需要控制各个模块之间的逻辑，这样对于系统的复杂度是降低了。这就好比我们在统计代码复杂度时，是分为圈复杂度，函数复杂度和类复杂度的。

圈复杂度是第一优先级需要解决的，一般解决方案是抽成几个函数，但是这仍然无法降低类复杂度，因此我们会把一个类拆分成几个类，如何拆分，拆分的粒度，这就是最核心的问题。类似的例子是很多的，我们的编程语言本身就是对汇编语言的封装，我们可以通过写高级语言，来完成一个功能，而不是写汇编代码。例如我们使用的基础类库，第三方库，这都是对功能的封装，我理解这些都是广义的模块化。模块化给我们的代码带来的最大好处就是复杂度相对降低，让我们在更high level的层次更容易理解和实现一个功能，而不需要care底层模块的实现过程。目前比较流行的微服务概念，组件化概念，我觉得都是同一种思想。

## 数据需要模型化    

模块化解决了业务逻辑的复杂性，但是数据的多样性仍然会导致代码间数据的转化过程很复杂，同时还要解决多份数据间的同步问题，数据一致性的问题等等，这些问题都会生产大量的代码。但是，如果我们设计好的model，真实的data只是用于填充model，那么不仅可以复用model，而且可以在模块间传递同一份model，来解决一致性问题。举个例子，例如我们见过了不止1万遍的下拉框组件，很简单，它的model就是一个text，而我们用这个组件，只需要将选项数据填充到下拉框中即可，点击下拉框，每一行都会显示一个text，这个组件是由它的view和model来确保这个组件的稳定性的，view保证了每一个item的视图都是一样的，model保证了每一行的数据类型都是一样的，我们没法在这个组件上给每个item同时制定一个index和一个text，因为组件的model就是一个text。这个例子非常简单易懂，但是，我并不觉得每个人都可以设计得如此完美。  
